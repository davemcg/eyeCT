---
title: "Build and Apply a Sex Predictor and Pull Apart the Why"
output: rmarkdown::html_vignette
date: "`r Sys.Date()`"
vignette: >
  %\VignetteIndexEntry{Build and Apply a Sex Predictor and Pull Apart the Why}
  %\VignetteEngine{knitr::rmarkdown}
  %\VignetteEncoding{UTF-8}
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(
  tidy = TRUE,
  tidy.opts = list(width.cutoff = 95),
  warning = FALSE,
  error = FALSE,
  message = FALSE,
  fig.width = 5,
  fig.height = 3,
  dpi=300
)
```

# Introduction
The GTEx resource contains thousands of human RNA-seq tissues. Here we use the recount3 package
to pull the GTEx brain RNA-seq datasets, use a subset to build a sex predictor, then apply it
to the remaining GTEx brain data **and** bring in a *outside* eye studies to see whether the
model still is useful.


# Pull in GTEx brain counts via recount3

We show the `gtex.sex` to see the sexes of the brain samples. `1` is male and `2` is female.

```{r load}
library(ggplot2)
library(dplyr)
library(recount3)
library(metamoRph)
human_projects <- available_projects()

project_info <- subset(human_projects, file_source == "gtex" & project_type == "data_sources" &
                         project == "BRAIN")

rse_gene_brain <- create_rse(project_info)

colData(rse_gene_brain)$gtex.sex %>%
  table()
```


# Extract read counts


```{r make counts}
brain_counts <- compute_read_counts(rse_gene_brain)
```

# Build metadata table for the "train" and "project" data
The `train` data is used to build the PCA object. That PCA data is used in the model building. The `project` data is then morphed/projected onto the PCA space with `metamoRph` and the output from that is used by `model_apply` to guess the sex.

This all happens in less than 10 seconds on my MacBook.


```{r bring in brain and process with metamorph}
set.seed(20230824)
brain_meta <- colData(rse_gene_brain)
# More human readable labels for the Sex
brain_meta$Sex <- ifelse(colData(rse_gene_brain)$gtex.sex == 1, 'Male','Female')
train_meta <- brain_meta %>%
  as_tibble(rownames = "id") %>%
  group_by(Sex) %>%
  sample_n(40)
project_meta <- brain_meta %>%
  as_tibble(rownames = "id") %>%
  filter(!id %in% train_meta$id)
# remove .digit ending to make a bit more portable across different references
row.names(brain_counts) <- gsub('\\.\\d+','',row.names(brain_counts))

train_counts <- brain_counts[, train_meta$id]
project_counts <- brain_counts[, project_meta$id]

gtex_sex <- run_pca(train_counts, train_meta, irlba_n = 50)

sex_model <- model_build(gtex_sex$PCA$x, gtex_sex$meta %>%
                               pull(Sex), num_PCs = 20, verbose = FALSE)

projected_data <- metamoRph(project_counts, gtex_sex$PCA$rotation, gtex_sex$center_scale)
# apply model
label_guesses <- model_apply(sex_model, projected_data, project_meta %>%
                               pull(Sex))
```

# Accuracy

100%
```{r accuracy of model}
num_correct <- label_guesses %>%
  filter(sample_label == predict) %>%
  nrow()
num_wrong <- label_guesses %>%
  filter(sample_label != predict) %>%
  nrow()

# accuracy
num_correct/(num_correct + num_wrong) * 100
```

# Identify the two most useful PC for Sex

Both models rely most on PC7 and PC8
```{r}
sex_model$Male$coefficients %>% tibble::enframe() %>% arrange(-abs(value)) %>% head(5)
sex_model$Female$coefficients %>% tibble::enframe() %>% arrange(-abs(value)) %>% head(5)
```
# Identify top genes for PC7

As recount3 used the "ENGS" identifier, we have to pull the gene IDs from another source.
In this case, `org.Hs.eg.db`.

We show the genes that contribute most to each PC (both top and bottom five).
```{r}
rotation <- gtex_sex$PCA$rotation[,c('PC7','PC8')] %>% as_tibble(rownames = 'ENSEMBL') 

library(org.Hs.eg.db)
conv_table <- select(org.Hs.eg.db, keys=rotation$ENSEMBL, 
                columns=c("SYMBOL","GENENAME", "MAP","GENETYPE"), keytype="ENSEMBL")

rotation <- rotation %>% left_join(conv_table, by = "ENSEMBL")
bind_rows(rotation %>% arrange(PC7) %>% head(5),
          rotation %>% arrange(-PC7) %>% head(5)) %>% arrange(-abs(PC7))
```

# Visualize the rotations

We see how the chrY genes are pointing towards the male samples and vice versa for the chrX genes. 
```{r sex_rotations, fig.height = 3}
top_rotations <- rotation %>% filter(SYMBOL %in% c("USP9Y","TTTY15","TSIX","XIST"))

rotation_multipler_first <- 30
rotation_multipler_second <- 30

bind_rows(projected_data %>%
            as_tibble(rownames = "id")) %>%
  left_join(colData(rse_gene_brain) %>%
              as_tibble(rownames = "id"), by = "id") %>%
  left_join(label_guesses, by = c(id = "sample_id")) %>%
  mutate(Sex = case_when(gtex.sex == 1 ~ 'Male',
                         gtex.sex == 2 ~ 'Female')) %>% 
  ggplot(aes(x = PC7, y = PC8)) + 
  geom_point(alpha = 0.5, aes(color = Sex)) + 
  geom_segment(data = top_rotations, 
                arrow = arrow(),
               aes(x=0,y=0, 
                   xend = .data[['PC7']]*rotation_multipler_first, 
                   yend = .data[['PC8']]*rotation_multipler_second)) +
  ggrepel::geom_label_repel(data = top_rotations,
                            aes(x=.data[['PC7']]*rotation_multipler_first, 
                            y = .data[['PC8']] * rotation_multipler_second, 
                            label = GENENAME)) +
  cowplot::theme_cowplot() 
```


# Does the model work on outside data?
EiaD data, filtered to the sex-labelled *eye* data alone (as EiaD also contains some GTEx)
```{r}
# outside brain prefrontal cortex (BA9)
eiad_counts <-  data.table::fread('https://hpc.nih.gov/~mcgaugheyd/eyeIntegration/2023/gene_counts.csv.gz')
eiad_matrix <- eiad_counts[,2:ncol(eiad_counts)] %>% as.matrix()
row.names(eiad_matrix) <- stringr::str_extract(eiad_counts$Gene, 'ENSG\\d+')

# eiad metadata
#emeta <- data.table::fread('https://hpc.nih.gov/~mcgaugheyd/eyeIntegration/2023/eyeIntegration_meta_2023_03_03.csv.gz') 
emeta <- data.table::fread('~/Downloads/eyeIntegration23_meta_2023_08_28.csv')
## ID female and male samples by searching for "female"" and " male"" in the sample_title and sample_attribute fields
female_accessions <- c(emeta %>% filter(grepl("female", sample_title)) %>% pull(run_accession),
                       emeta %>% filter(grepl("female", sample_attribute)) %>% pull(run_accession)) %>% 
  unique()
male_accessions <- c(emeta %>% filter(grepl(" male", sample_title)) %>% pull(run_accession),
                       emeta %>% filter(grepl(" male", sample_attribute)) %>% pull(run_accession)) %>% 
  unique()

emeta <- emeta %>% mutate(Sex = case_when(run_accession %in% female_accessions ~ 'Female',
                                           run_accession %in% male_accessions ~ 'Male'))

eiad_mat_sexed <- eiad_matrix[, (emeta %>% filter(Cohort == 'Eye', !is.na(Sex)) %>% pull(sample_accession))]
```

Run `metamoRph` to transform the EiaD data into the same PCA space we made earlier with the GTEx brain data.
Then use `model_apply` to predict the sex.

```{r}
projected_data_outside <- metamoRph(eiad_mat_sexed, gtex_sex$PCA$rotation, gtex_sex$center_scale)
label_guesses_outside <- model_apply(sex_model, projected_data_outside, emeta %>% filter(Cohort == 'Eye', !is.na(Sex)) %>% pull(Sex) %>% stringr::str_to_title())
```

## Accuracy

99.5% Three out of 619 labelled sexes are wrong. The three that don't match the label have pretty high scores (0.772 to 0.938). 
```{r}
num_correct <- label_guesses_outside %>%
  filter(sample_label == predict) %>% 
  nrow()
num_wrong <- label_guesses_outside %>%
  filter(sample_label != predict) %>% 
  nrow()

# accuracy
num_correct/(num_correct + num_wrong) * 100

label_guesses_outside %>%
  filter(sample_label != predict) %>% dplyr::select(-predict_second, -predict_stringent)

```

### Labels wrong?

I'm a bit more suspicious that the labels themselves are wrong. The first three samples are labelled as females but the ML thinks they are male. The fourth sample is a female both in ML and label. The fifth sample is male in both label and ML. We can see the large difference in CPM of the chrY gene USP9Y which suggest these three are mislabelled. 

```{r}
metamoRph::normalize_data(eiad_matrix)[c("ENSG00000114374"),
                                       c("DRS161828","DRS161832","SRS11824523","DRS161830", "DRS161829"), drop = FALSE] %>% 
  t() %>% 
  as_tibble(rownames = 'sample_id') %>% 
  left_join(label_guesses_outside %>% dplyr::select(sample_id:predict))
```

# Save for future use

This is admittedly a bit rough, as I have not re-used existing models in anger much. 

There are (up to) two "things" to save:

1. The PCA info (`gtex_sex`). You only *need* the rotation matrix (`gtex_sex$PCA$rotation`) and the center/scale values (`gtex_sex$center_scale`). The matrix and center/scale values can be saved as text files. But it is much easier to just `save` the object itself, which also has the full `prcomp` object and the metadata. Then you can `load` it later. But if you need to pare it down for "production" use, then go ahead and just save the rotation matrix and center/scale values however you prefer.
2. The trained model (`sex_model`). I suggest you just save/load via `save` and `load`. You can trim the [fat](https://win-vector.com/2014/05/30/trimming-the-fat-from-glm-models-in-r/), if you are building a huge model. 

```{r}
system('mkdir -p ~/data/metamoRph_models/')
save(gtex_sex, sex_model, file = '~/data/metamoRph_models/sex.Rdata')
```

# Session Info

```{r}
sessionInfo()
```
